<Project>
    <PropertyGroup>
        <!--
        This enables a default restore task in the event you are trying to build a project that has yet to run the nuke build or dotnet tool restore.
        -->
        <EnsureNukeRestore Condition="'$(EnsureNukeRestore)' == ''">true</EnsureNukeRestore>
        <EnsureNukeRestoreTask Condition="'$(EnsureNukeRestoreTask)' == ''">restore</EnsureNukeRestoreTask>
        <!--
        The project model is banned because there can be a disconnect from newer versions of MSBuild tools.
        However if you do not want to have your build tools banned you can set the NukeBanProjectModel to some value other than true
        -->
        <NukeBanProjectModel Condition="'$(EnsureNukeRestoreTask)' == ''">true</NukeBanProjectModel>
    </PropertyGroup>
    <ItemGroup>
        <NukeSpecificationFiles Include="**\*.json" Exclude="bin\**;obj\**" />
        <NukeExternalFiles Include="**\*.*.ext" Exclude="bin\**;obj\**" />
        <None Remove="*.csproj.DotSettings;*.ref.*.txt" />

        <!-- Common build related files -->
        <None Include="$(_NukeFiles)" Link=".nuke\$([MSBuild]::MakeRelative($(_NukeRoot), %(FullPath)))" />
        <None Include="$(_CiFiles)" Link=".ci\$([MSBuild]::MakeRelative($(_NukeRoot), %(FullPath)))" />
        <None Include="$(_GitFiles)" Link=".git\$([MSBuild]::MakeRelative($(_NukeRoot), %(FullPath)))" />
        <None Include="$(_ConfigFiles)" Link=".config\$([MSBuild]::MakeRelative($(_NukeRoot), %(FullPath)))" />
        <None Include="$(_NukeRoot)\*.md" Link="docs\$([MSBuild]::MakeRelative($(_NukeRoot), %(FullPath)))" />
        <None Include="$(_NukeRoot)\docs\**\*.md" Link="$([MSBuild]::MakeRelative($(_NukeRoot), %(FullPath)))" />
        <None Include="$(_NukeRoot)\LICENSE" Condition="Exists('$(_NukeRoot)\LICENSE')" Link="docs\$([MSBuild]::MakeRelative($(_NukeRoot), %(FullPath)))" />
        <None Include="$(_NukeRoot)\.husky\*" Link="$([MSBuild]::MakeRelative($(_NukeRoot), %(FullPath)))" />
        <None Include="$(_NukeRoot)\.github\**" Link="$([MSBuild]::MakeRelative($(_NukeRoot), %(FullPath)))" />
        <None Include="$(_NukeRoot)\.vscode\**" Link="$([MSBuild]::MakeRelative($(_NukeRoot), %(FullPath)))" />
        <None Include="$(_NukeRoot)\.idea\**" Link="$([MSBuild]::MakeRelative($(_NukeRoot), %(FullPath)))" />
        <None Include="$(_NukeRoot)\.devcontainer\**" Link="$([MSBuild]::MakeRelative($(_NukeRoot), %(FullPath)))" />
        <None Include="$(_NukeRoot)\*.props;$(_NukeRoot)\*.targets" Link=".config\$([MSBuild]::MakeRelative($(_NukeRoot), %(FullPath)))" />
        <None Include="$(_NukeRoot)\version\*.props;$(_NukeRoot)\version\*.targets" Link=".config\$([MSBuild]::MakeRelative($(_NukeRoot), %(FullPath)))" />
        <None Include="$(_NukeRoot)\test\*.props;$(_NukeRoot)\test\*.targets" Link=".config\$([MSBuild]::MakeRelative($(_NukeRoot), %(FullPath)))" />
        <None Include="$(_NukeRoot)\src\*.props;$(_NukeRoot)\src\*.targets" Link=".config\$([MSBuild]::MakeRelative($(_NukeRoot), %(FullPath)))" />

        <None Include="$(_NukeRoot)\.config\dotnet-tools.json" Link=".config/dotnet-tools.json" Condition="Exists('$(_NukeRoot)\.config\dotnet-tools.json')" />
        <None Include="$(_NukeRoot)\.github\renovate.json" Link=".config/renovate.json" Condition="Exists('$(_NukeRoot)\.github\renovate.json')" />
        <None Include="$(_NukeRoot)\.github\renovate.json5" Link=".config/renovate.json5" Condition="Exists('$(_NukeRoot)\.github\renovate.json5')" />
    </ItemGroup>

    <ItemGroup Condition="'$(NukeBanProjectModel)' == 'true'">
        <AdditionalFiles
            Include="$(MSBuildThisFileDirectory)/BannedSymbols.Rocket.Surgery.Nuke.txt"
            Condition="Exists('$(MSBuildThisFileDirectory)/BannedSymbols.Rocket.Surgery.Nuke.txt')"
        />
        <GlobalAnalyzerConfigFiles Include="$(MSBuildThisFileDirectory)/banned_symbols.globalconfig" />
    </ItemGroup>

    <Target
        Name="EnsureNukeRestore"
        BeforeTargets="Restore;CollectPackageReferences"
        Condition="'$(CI)' == '' and '$(DesignTimeBuild)' != 'true' and '$(EnsureNukeRestore)' == 'enable' and !Exists('$(_NukeTemp)')"
    >
        <Exec Command="dotnet tool restore" StandardOutputImportance="Low" StandardErrorImportance="High" WorkingDirectory="$(_NukeRoot)" />
        <Exec Command="dotnet nuke $(EnsureNukeRestoreTask)" StandardOutputImportance="Low" StandardErrorImportance="High" WorkingDirectory="$(_NukeRoot)" />
    </Target>
</Project>
